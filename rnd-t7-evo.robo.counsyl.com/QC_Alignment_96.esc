FAB3B7C4
20220719_160051 Admin           
                                                                                                                                
Administrator                                                                                                                   
--{ RES }--
V;200
--{ CFG }--
999;219;32;
14;-1;30;235;-1;-1;-1;-1;-1;12;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
998;0;
998;3;Wash Station Cleaner shallow;Wash Station Waste;Wash Station Cleaner deep;
998;;;;
998;3;Greiner BioOne;Greiner BioOne;Beckman Quarter Trough;
998;QC-1;QC-2;Trough1;
998;0;
998;0;
998;0;
998;0;
998;0;
998;3;Greiner BioOne;Greiner BioOne;96 Well DeepWell PRP;
998;QC-3;QC-4;Target;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;1;
998;4;0;System;
998;0;
998;1;
996;0;0;
--{ RPG }--
Group("Constants and Variables");
Comment("Initializing Evoware variables...");
Group("Protocol Constants");
Variable(Version,"1.1.0",0,"",0,1.000000,10.000000,1,2,0,0);
Variable(Protocol,"QC_Alignment_96",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(MoveToZDispense,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TargetingPrompt,"Are the tips aligned with the wells in x and y?",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(Pipette,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TargetingPerformed,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(LevelingPerformed,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TxVol,"35",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(ExcessVol,"10",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(AirGapVol,"15",0,"0",0,0.000000,1.000000,0,2,0,0);
GroupEnd();
Group("Paths");
Variable(CommonPath,"C:\LocalRobotPrograms\EVO\",0,"",0,1.000000,10.000000,1,2,0,0);
Variable(CommonScriptsPath,"~CommonPath~Subroutines\",0,"",0,1.000000,10.000000,1,2,0,0);
Variable(ProgramPath,"~CommonPath~~Protocol~ v~Version~\",0,"",0,1.000000,10.000000,1,2,0,0);
Variable(HelperPath,"~ProgramPath~~Protocol~Helper.exe ",0,"",0,0.000000,0.000000,1,0,0,0);
Variable(CommPath,"C:\Dx_xml_trxns\comm.txt",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(WashTips,"~CommonScriptsPath~WashTips_Left.esc",0,"0",0,0.000000,1.000000,1,2,0,0);
GroupEnd();
Group("Communication");
Variable(ReturnVal,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Return_OK,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Return_Cancel,"2",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Return_Abort,"4",0,"",0,0.000000,0.000000,0,0,0,0);
Variable(Return_Retry,"8",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Return_Ignore,"16",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Return_Yes,"32",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Return_No,"64",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(BtnMask_YesNo,"Return_Yes + Return_No",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(BtnMask_RetryAbort,"Return_Retry + Return_Abort",0,"0",0,0.000000,1.000000,0,2,0,0);
GroupEnd();
Group("Config Variables");
Variable(SIM,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(PressureMonitor,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(RoMa,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Magellan,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(SecondLiHa,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TipLeft,"NA",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(TipRight,"NA",0,"0",0,0.000000,1.000000,1,2,0,0);
GroupEnd();
Group("Automated Variables");
Variable(CentrifugePlatesAfterRun,"1",0,"",0,1.000000,10.000000,0,2,0,0);
Variable(PlateSets,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(SampleNum,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TestType,"NA",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(ScanMode,"Offline w/o scanning",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(WashesPerformed_Left,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
GroupEnd();
Group("Hardcoded options to support subroutine expectations");
Variable(DualRunsPossible,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(LeftSide,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Pipette_Left,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(RightSide,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(Pipette_Right,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(ReturnVal_Right,"-1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(HelperPath_Left,"~HelperPath~",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(CommPath_Left,"~CommPath~",0,"0",0,0.000000,1.000000,1,2,0,0);
GroupEnd();
GroupEnd();
Group("Read Robot Config");
Comment("Reading MyriadCFG.xml...");
EXECUTE_VBSCRIPT("~CommonPath~GetMyriadCFG.vbs",0);
Comment("MyriadCFG.xml read complete");
GroupEnd();
Group("Get User Options");
Comment("Displaying options page...");
EXECUTE_VBSCRIPT("~CommonPath~UnlockDoor.vbs",0);
Execute("~HelperPath~custom_options",6,"ReturnVal",2);
EXECUTE_VBSCRIPT("~CommonPath~LockDoor.vbs",0);
If("ReturnVal",1,"Return_OK","ABORT");
ImportVariable(CentrifugePlatesAfterRun#PerformSystemFlush#RunStartTime#AutoPrint,"~CommPath~",0#0#1#0,"0#0#NA#0",0,1,0,1,0);
Execute("~HelperPath~validate_dependencies",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Abort","ABORT");
Comment("Options page complete");
GroupEnd();
Group("System Flush");
IfThen("PerformSystemFlush",0,"1");
Comment("Performing system flush...");
Subroutine("~CommonScriptsPath~SystemFlush.esc",0);
If("1",0,"1","Displaying options page...");
Else();
EndIf();
GroupEnd();
Group("LDAP Authentication");
Comment("Authenticating user...");
Execute("~HelperPath~authenticate",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Abort","ABORT");
If("ReturnVal",0,"Return_Retry","Authenticating User...");
ImportVariable(UserName,"~CommPath~",1,"NA",0,1,0,1,1);
Comment("Authentication complete");
GroupEnd();
Group("Initialize Robot");
Comment("Initializing Left LiHa...");
Command("C5PAZ2100,2100,2100,2100,2100,2100,2100,2100",1,1,,,2,2,0);
Comment("Initializing PosID...");
Command("P1PAA-810,-200,-919",1,1,,,2,2,0);
Comment("Robot initialization complete");
GroupEnd();
Group("Scan Carrier Flags");
Comment("Scanning carrier flags...");
IfThen("SIM",0,"0");
Execute("~HelperPath~gridlist",2,"",2);
If("ReturnVal",0,"Return_Abort","ABORT");
ImportVariable(CheckDeckGridList,"~CommPath~",1,"NA",0,1,0,1,0);
EXECUTE_VBSCRIPT("~CommonPath~ScanCarrierFlags.vbs",0);
If("ReturnVal",0,"Return_Abort","ABORT");
If("ReturnVal",0,"Return_Retry","Scanning carrier flags...");
Comment("Carrier flag scanning complete");
Else();
Comment("Skipping carrier flag scanning (Using EvoSim)");
EndIf();
GroupEnd();
Group("Scan Carrier");
FACTS("PosID3","PosID3_Scan","USER_ERRORPROMPT;False;False;SCANRESULT_FILE;False;OVERWRITE_BC;True;CARRIER_DEF;503;;;MP 3Pos Slow;2;3;LABWARE_DEF;QC-1;;Greiner BioOne;0;0;;0;None;LABWARE_DEF;QC-2;;Greiner BioOne;1;0;;0;None;LABWARE_DEF;Trough1;;Beckman Quarter Trough;2;0;;0;None;CARRIER_DEF;22;;;MP 3Pos;8;3;LABWARE_DEF;QC-3;;Greiner BioOne;0;0;;0;None;LABWARE_DEF;QC-4;;Greiner BioOne;1;0;;0;None;LABWARE_DEF;Target;;96 Well DeepWell PRP;2;0;;0;None;BARCODETYPE_DEF;Code128;0;Off;Off;BARCODETYPE_DEF;Code39Standard;0;Off;Off;","0","");
GroupEnd();
Group("Target");
Comment("Begin targetting...");
Wash(255,1,1,1,0,"0",500,"1",500,10,70,30,1,0,1000,0);
MoveLiha(255,8,2,1,"0C08¯1000000000000",0,0,0,10,0,0);
MoveLiha(255,8,2,1,"0C08¯1000000000000",4,2,0,50,0,0);
EXECUTE_VBSCRIPT("~CommonPath~OpenDoor.vbs",0);
Variable(Message,"~TargetingPrompt~",0,"0",0,0.000000,1.000000,1,2,0,0);
ExportVariable(Message#BtnMask_YesNo,"~CommPath~",0,1);
Execute("~HelperPath~prompt",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Yes","Targetting complete");
If("ReturnVal",0,"Return_Abort","ABORT");
Variable(Pipette,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TargetingPerformed,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TIP_MASK,"255",0,"0",0,0.000000,1.000000,0,2,0,0);
BeginLoop("999","Target");
IfThen("loop_Target",0,"999");
Variable(loop_Target,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Else();
EndIf();
ExportVariable(WELL_OFFSET#TIP_MASK#MoveToZDispense,"~CommPath~",0,1);
Execute("~HelperPath~target",6,"ReturnVal",2);
Variable(TIP_MASK,"255",0,"0",0,0.000000,1.000000,0,2,0,0);
MoveLiha(255,8,2,1,"0C08¯1000000000000",4,4,0,300,0,0);
If("ReturnVal",0,"Return_Abort","ABORT");
If("ReturnVal",0,"Return_Cancel","Targetting complete");
Variable(PreviousWellOffset,"WELL_OFFSET",0,"0",0,0.000000,1.000000,0,2,0,0);
ImportVariable(WELL_OFFSET#TIP_MASK#MoveToZDispense,"~CommPath~",0#0#0,"0.000000#0.000000#0.000000",0,1,0,1,0);
IfThen("PreviousWellOffset",1,"WELL_OFFSET");
Variable(TIP_MASK_temp,"TIP_MASK",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(TIP_MASK,"255",0,"0",0,0.000000,1.000000,0,2,0,0);
MoveLiha(255,8,2,1,"0C08¯1000000000000",0,4,0,25,0,0);
Variable(TIP_MASK,"TIP_MASK_temp",0,"0",0,0.000000,1.000000,0,2,0,0);
Else();
EndIf();
MoveLiha(255,8,2,1,"0C08¯1000000000000",4,0,0,200,0,0);
IfThen("MoveToZDispense",0,"1");
MoveLiha(255,8,2,1,"0C08¯1000000000000",4,1,0,50,0,0);
Else();
MoveLiha(255,8,2,1,"0C08¯1000000000000",4,2,0,50,0,0);
EndIf();
EndLoop();
Comment("Targetting complete");
EXECUTE_VBSCRIPT("~CommonPath~CloseDoor.vbs",0);
GroupEnd();
Group("Level");
Comment("Begin levelling...");
Variable(WELL_OFFSET,"48",0,"0",0,0.000000,1.000000,0,2,0,0);
MoveLiha(255,8,2,1,"0C08¯1000000000000",0,4,0,10,0,0);
Variable(Message,"Remove the plate directly below the left arm's tips. ",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(Message,"~Message~ Tips will move straight ",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(Message,"~Message~down from their current position.",0,"0",0,0.000000,1.000000,1,2,0,0);
ExportVariable(Message,"~CommPath~",0,1);
Execute("~HelperPath~prompt",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Abort","ABORT");
MoveLiha(255,8,2,1,"0C08¯1000000000000",4,3,0,20,0,0);
Group("Read Offsets");
Command("C5RPZ4",5,1,FinalZParam_L[0],,2,2,0);
Command("C5RPZ4",5,2,FinalZParam_L[1],,2,2,0);
Command("C5RPZ4",5,3,FinalZParam_L[2],,2,2,0);
Command("C5RPZ4",5,4,FinalZParam_L[3],,2,2,0);
Command("C5RPZ4",5,5,FinalZParam_L[4],,2,2,0);
Command("C5RPZ4",5,6,FinalZParam_L[5],,2,2,0);
Command("C5RPZ4",5,7,FinalZParam_L[6],,2,2,0);
Command("C5RPZ4",5,8,FinalZParam_L[7],,2,2,0);
GroupEnd();
ExportVariable(FinalZParam_L[0]#FinalZParam_L[1]#FinalZParam_L[2]#FinalZParam_L[3]#FinalZParam_L[4]#FinalZParam_L[5]#FinalZParam_L[6]#FinalZParam_L[7],"~CommPath~",0,1);
EXECUTE_VBSCRIPT("~CommonPath~OpenDoor.vbs",0);
BeginLoop("999","Level");
Execute("~HelperPath~level",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Abort","ABORT");
ImportVariable(firmwareCommand#FinalZParam_L[0]#FinalZParam_L[1]#FinalZParam_L[2]#FinalZParam_L[3]#FinalZParam_L[4]#FinalZParam_L[5]#FinalZParam_L[6]#FinalZParam_L[7]#InitZParam_L[0]#InitZParam_L[1]#InitZParam_L[2]#InitZParam_L[3]#InitZParam_L[4]#InitZParam_L[5]#InitZParam_L[6]#InitZParam_L[7],"~CommPath~",1#0#0#0#0#0#0#0#0#0#0#0#0#0#0#0#0,"NA#0#0#0#0#0#0#0#0#0#0#0#0#0#0#0#0",0,1,0,1,0);
If("ReturnVal",0,"Return_Cancel","Levelling complete");
If("ReturnVal",0,"Return_OK","Writing offsets to EPROM...");
Command("~firmwareCommand~",1,1,,,2,2,1);
ExportVariable(FinalZParam_L[0]#FinalZParam_L[1]#FinalZParam_L[2]#FinalZParam_L[3]#FinalZParam_L[4]#FinalZParam_L[5]#FinalZParam_L[6]#FinalZParam_L[7]#InitZParam_L[0]#InitZParam_L[1]#InitZParam_L[2]#InitZParam_L[3]#InitZParam_L[4]#InitZParam_L[5]#InitZParam_L[6]#InitZParam_L[7],"~CommPath~",0,1);
EndLoop();
If("1",0,"1","Begin levelling...");
Comment("Writing offsets to EPROM...");
Variable(Pipette,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(LevelingPerformed,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Command("~firmwareCommand~",1,1,,,2,2,1);
Command("C5AWE",1,1,,,2,2,1);
Comment("Levelling complete");
MoveLiha(255,8,2,1,"0C08¯1000000000000",0,4,0,10,0,0);
EXECUTE_VBSCRIPT("~CommonPath~CloseDoor.vbs",0);
Variable(TIP_MASK,"255",0,"0",0,0.000000,1.000000,0,2,0,0);
Variable(WELL_OFFSET,"0",0,"0",0,0.000000,1.000000,0,2,0,0);
MoveLiha(255,1,1,1,"0108¯1",0,4,0,10,0,0);
GroupEnd();
Group("Automatic emailing");
IfThen("Pipette",2,"0");
ExportVariable(UserName#TargetingPerformed#LevelingPerformed#InitZParam_L[0]#InitZParam_L[1]#InitZParam_L[2]#InitZParam_L[3]#InitZParam_L[4]#InitZParam_L[5]#InitZParam_L[6]#InitZParam_L[7]#FinalZParam_L[0]#FinalZParam_L[1]#FinalZParam_L[2]#FinalZParam_L[3]#FinalZParam_L[4]#FinalZParam_L[5]#FinalZParam_L[6]#FinalZParam_L[7],"~CommPath~",0,1);
Execute("~HelperPath~qc_email",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Abort","ABORT");
Else();
EndIf();
GroupEnd();
Group("QC Logic");
IfThen("Pipette",0,"0");
Variable(Message,"You have not made changes to targeting or leveling. ",0,"0",0,0.000000,1.000000,1,2,0,0);
Variable(Message,"~Message~Would you like to run the weekly QC?",0,"0",0,0.000000,1.000000,1,2,0,0);
ExportVariable(Message#BtnMask_YesNo,"~CommPath~",0,1);
Execute("~HelperPath~prompt",6,"ReturnVal",2);
If("ReturnVal",0,"Return_Abort","ABORT");
IfThen("ReturnVal",0,"Return_Yes");
Variable(Pipette,"1",0,"0",0,0.000000,1.000000,0,2,0,0);
Else();
EndIf();
Else();
EndIf();
GroupEnd();
Group("Pipetting");
IfThen("Pipette",2,"0");
Comment("Starting Pipetting...");
Subroutine("~CommonScriptsPath~LLD_Troughs.esc",0);
If("ReturnVal_Left",0,"Return_Abort","ABORT");
Subroutine("~CommonScriptsPath~WashTips_Left.esc",0);
Group("Pipeting for the current bed");
BeginLoop("4","ASP_DSP_Left");
Group("ASP Dye");
Aspirate(255,"Air","AirGapVol","AirGapVol","AirGapVol","AirGapVol","AirGapVol","AirGapVol","AirGapVol","AirGapVol",0,0,0,0,2,2,1,"040800000000¯1",0,0);
Aspirate(255,"QC_Alignment_96","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol","12 * TxVol + ExcessVol",0,0,0,0,2,2,1,"0408000¨?",0,0);
GroupEnd();
BeginLoop("12","Dispense_Left");
Dispense(255,"QC_Alignment_96","TxVol","TxVol","TxVol","TxVol","TxVol","TxVol","TxVol","TxVol",0,0,0,0,2,0,1,"0C08¯1000000000000",2,"Dispense_Left",0,1,"ASP_DSP_Left",3,1,0);
EndLoop();
Subroutine("~CommonScriptsPath~WashTips_Left.esc",0);
EndLoop();
GroupEnd();
Comment("Finish Pipette");
Else();
EndIf();
GroupEnd();
Group("End of run");
Variable(ReturnVal,"Return_OK",0,"0",0,0.000000,0.000000,0,2,0,0);
Group("Bedmaps");
Comment("Printing bedmap...");
ExportVariable(RunStartTime#AutoPrint#ReturnVal#UserName#Version#TargetingPerformed#LevelingPerformed,"~CommPath~",0,1);
Execute("~HelperPath~custom_bedmap",0,"ReturnVal",2);
StartTimer("1");
WaitTimer("1","10");
Variable(ReturnVal,"Return_OK",0,"0",0,0.000000,1.000000,0,2,0,0);
If("1",0,"1","End");
GroupEnd();
Group("Abort");
Comment("ABORT");
Variable(ReturnVal,"Return_Abort",0,"0",0,0.000000,1.000000,0,2,0,0);
GroupEnd();
Group("End");
Comment("End");
Group("Run has finished prompt");
IfThen("ReturnVal",0,"Return_OK");
Variable(PromptMessage,"Run has finished! See bedmap(s) for details.",0,"",0,1.000000,10.000000,1,2,0,0);
Else();
Variable(PromptMessage,"Run has been aborted!",0,"",0,1.000000,10.000000,1,2,0,0);
EndIf();
ExportVariable(PromptMessage,"~CommPath~",0,1);
Execute("~HelperPath~prompt",0,"OptionProceed",2);
GroupEnd();
Group("Centrifuge plates prompt");
IfThen("CentrifugePlatesAfterRun",0,"1");
IfThen("Pipette",2,"0");
StartTimer("1");
WaitTimer("1","10");
Variable(PromptMessage,"Don't forget to centrifuge these plates before proceeding with ",0,"",0,1.000000,10.000000,1,2,0,0);
Variable(PromptMessage,"~PromptMessage~processing.",0,"",0,1.000000,10.000000,1,2,0,0);
ExportVariable(PromptMessage,"~CommPath~",0,1);
Execute("~HelperPath~prompt",0,"OptionProceed",2);
Else();
EndIf();
Else();
EndIf();
GroupEnd();
EndScript(0);
GroupEnd();
GroupEnd();
